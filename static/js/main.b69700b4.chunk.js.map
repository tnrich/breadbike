{"version":3,"sources":["utils/createSpreadsheets.js","App.js","serviceWorker.js","index.js"],"names":["createSpreadsheets","dataArray","myHeaders","Headers","append","raw","JSON","stringify","fetch","method","headers","body","redirect","then","response","text","result","console","log","catch","error","App","className","onClick","onChange","event","fileList","document","querySelector","files","Papa","parse","header","transformHeader","camelCase","complete","results","data","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wOAGO,SAASA,EAAmBC,GA2BnC,IAAIC,EAAY,IAAIC,QACpBD,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,SAAU,gFAE3B,IAAIC,EAAMC,KAAKC,UAAU,CAAC,KAAO,cAAc,UAAY,+BAA+B,SAAW,+BAA+B,WAAY,EAAK,UAAW,EAAM,MAAQ,CAAC,CAAC,KAAO,kBAAkB,QAAU,4BAA4B,IAAM,OAAO,IAAM,OAAO,YAAc,EAAE,KAAO,mBAAmB,MAAQ,eAAe,MAAQ,gBAAgB,CAAC,KAAO,uBAAuB,QAAU,6BAA6B,IAAM,OAAO,IAAM,OAAO,YAAc,EAAE,KAAO,mBAAmB,MAAQ,oBAAoB,MAAQ,eAAe,WAAa,OAAO,QAAU,EAAE,KAAO,YAAY,WAAa,EAAE,OAAS,gBAAgB,aAAc,IASxoBC,MAAM,sIAPe,CACnBC,OAAQ,OACRC,QAASR,EACTS,KAAMN,EACNO,SAAU,WAITC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIC,QAAQC,IAAIF,MAC3BG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAI,QAASE,MCZxBC,MA3Bf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAQC,QAASvB,GAAjB,YADF,mCAGE,2BACEsB,UAAW,YACXE,SAAU,SAAUC,GAClB,IAAIC,EAAWC,SAASC,cAAc,cAAcC,MACpDZ,QAAQC,IAAR,YAAyBQ,GACzBI,IAAKC,MAAML,EAAS,GAAI,CACtBM,QAAQ,EACRC,gBAAiBC,YACjBC,SAAU,SAASC,GACjBnB,QAAQC,IAAI,YAAakB,EAAQC,MACjCrC,EAAmBoC,EAAQC,UAIjCC,KAAK,YCfKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMiC,a","file":"static/js/main.b69700b4.chunk.js","sourcesContent":["import { forEach, flatMap } from \"lodash\";\nimport parseAddress from \"parse-address\";\n\nexport function createSpreadsheets(dataArray) {\n  // const spreadsheetsByRoute = {};\n  // console.log(`dataArray:`, dataArray);\n  // dataArray.forEach((d) => {\n  //   const { route } = d;\n  //   if (!route) return console.log(\"No route found for data: \", d);\n  //   if (!spreadsheetsByRoute[route]) spreadsheetsByRoute[route] = [];\n  //   spreadsheetsByRoute[route].push(d);\n  // });\n\n//   var data = JSON.stringify({\"Name\":\"A New Route\",\"StartTime\":\"2020-05-14T04:03:03.2838573Z\",\"StopTime\":\"2020-05-14T05:03:03.2838573Z\",\"HardStart\":true,\"HardStop\":false,\"Stops\":[{\"Name\":\"My new location\",\"Address\":\"123 Main Street, New York\",\"Lat\":33.274,\"Lng\":33.927,\"ServiceTime\":5,\"Note\":\"A note goes here\",\"Email\":\"me@email.com\",\"Phone\":\"555-555-5555\"},{\"Name\":\"Another new location\",\"Address\":\"1025 31st Street, New York\",\"Lat\":33.323,\"Lng\":33.672,\"ServiceTime\":5,\"Note\":\"A note goes here\",\"Email\":\"someone@email.com\",\"Phone\":\"555-555-4444\",\"ScheduleId\":null}],\"OptType\":2,\"Note\":\"Test Note\",\"TravelMode\":0,\"Driver\":\"driver@domain\",\"IsRoundTrip\":false});\n\n// var xhr = new XMLHttpRequest();\n// xhr.withCredentials = true;\n\n// xhr.addEventListener(\"readystatechange\", function() {\n//   if(this.readyState === 4) {\n//     console.log(this.responseText);\n//   }\n// });\n\n// xhr.open(\"POST\", \"https://teamapi.roadwarrior.app/api/Route/Add?token=Ue-obZyeBxKfPFVj7zsRgCb-IN7UtqJv&accountid=5cb4df78-e19f-47b7-a7b1-5440403a5855\");\n// xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n// xhr.setRequestHeader(\"Cookie\", \"ARRAffinity=37a4b180fc5c13ec38328215f7bb8800a5528533610be704150affdb5c75c312\");\n\n// xhr.send(data);\n\nvar myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Cookie\", \"ARRAffinity=2440fd1f13ba23f6760a8ec999db8c302b1fd8bd292921f166842cfad5e92165\");\n\nvar raw = JSON.stringify({\"Name\":\"A New Route\",\"StartTime\":\"2020-05-14T04:03:03.2838573Z\",\"StopTime\":\"2020-05-14T05:03:03.2838573Z\",\"HardStart\":true,\"HardStop\":false,\"Stops\":[{\"Name\":\"My new location\",\"Address\":\"123 Main Street, New York\",\"Lat\":33.274,\"Lng\":33.927,\"ServiceTime\":5,\"Note\":\"A note goes here\",\"Email\":\"me@email.com\",\"Phone\":\"555-555-5555\"},{\"Name\":\"Another new location\",\"Address\":\"1025 31st Street, New York\",\"Lat\":33.323,\"Lng\":33.672,\"ServiceTime\":5,\"Note\":\"A note goes here\",\"Email\":\"someone@email.com\",\"Phone\":\"555-555-4444\",\"ScheduleId\":null}],\"OptType\":2,\"Note\":\"Test Note\",\"TravelMode\":0,\"Driver\":\"driver@domain\",\"IsRoundTrip\":false});\n\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: raw,\n  redirect: 'follow'\n};\n\nfetch(\"https://teamapi.roadwarrior.app/api/Route/Add?token=Ue-obZyeBxKfPFVj7zsRgCb-IN7UtqJv&accountid=5cb4df78-e19f-47b7-a7b1-5440403a5855\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n\n\n// var geocoder = new google.maps.Geocoder();\n//       var address = \"new york\";\n\n//       geocoder.geocode({ address: address }, function (results, status) {\n//         if (status == google.maps.GeocoderStatus.OK) {\n//           var latitude = results[0].geometry.location.lat();\n//           var longitude = results[0].geometry.location.lng();\n//           alert(latitude);\n//         }\n//       });\n\n\n  // window.fetch(\n  //   \"https://teamapi.roadwarrior.app/api/Route/Add?token=Ue-obZyeBxKfPFVj7zsRgCb-IN7UtqJv&accountid=5cb4df78-e19f-47b7-a7b1-5440403a5855\",\n  //   {\n  //     headers: new Headers({\n  //       \"x-thomas\": \"hello\",\n  //       Accept: \"*/*\",\n  //       \"Content-Type\": \"application/json\",\n  //     }),\n  //     mode: \"cors\",\n  //     method: \"POST\",\n  //     body: JSON.stringify({\n  //       Name: \"A New Route\",\n  //       StartTime: \"2020-05-14T04:03:03.2838573Z\",\n  //       StopTime: \"2020-05-14T05:03:03.2838573Z\",\n  //       HardStart: true,\n  //       HardStop: false,\n  //       Stops: [\n  //         {\n  //           Name: \"My new location\",\n  //           Address: \"123 Main Street, New York\",\n  //           Lat: 33.274,\n  //           Lng: 33.927,\n  //           ServiceTime: 5,\n  //           Note: \"A note goes here\",\n  //           Email: \"me@email.com\",\n  //           Phone: \"555-555-5555\",\n  //           ScheduleId: \"6248f0f4-a30d-4584-8e13-1e91be85d59b\",\n  //         },\n  //         {\n  //           Name: \"Another new location\",\n  //           Address: \"1025 31st Street, New York\",\n  //           Lat: 33.323,\n  //           Lng: 33.672,\n  //           ServiceTime: 5,\n  //           Note: \"A note goes here\",\n  //           Email: \"someone@email.com\",\n  //           Phone: \"555-555-4444\",\n  //           ScheduleId: null,\n  //         },\n  //       ],\n  //       OptType: 2,\n  //       Note: \"Test Note\",\n  //       TravelMode: 0,\n  //       Driver: \"driver@domain\",\n  //       IsRoundTrip: false,\n  //     }),\n  //   }\n  // );\n\n  // forEach(spreadsheetsByRoute, (data, key) => {\n  //   if (!key) return console.log(\"No key found for data: \", data);\n\n  //   createRoadWarriorExcel(data, key);\n  // });\n}\n\nfunction createRoadWarriorExcel(data, name) {\n  console.log(`name:`, name);\n  const prettyData = flatMap(data, prettifyRoadWarrior);\n  var wb = window.XLSX.utils.book_new();\n  const ws = window.XLSX.utils.json_to_sheet(prettyData);\n  var ws_name = \"Uploads\";\n\n  /* Add the worksheet to the workbook */\n  window.XLSX.utils.book_append_sheet(wb, ws, ws_name);\n  window.XLSX.writeFile(wb, `${name}_out.xlsx`);\n}\n\n// \"\": \"\"\n// address: \"1512 Morro Street\"\n// city: \"San Luis Obispo\"\n// comments: \"\"\n// deliveryDate: \"Thursday, May 28, 2020\"\n// firstName: \"Torrey\"\n// lastName: \"Sanseverino\"\n// location: \"Home Delivery - Torrey Sanseverino\"\n// modified: \"No\"\n// primaryPhone: \"(858) 722 3003\"\n// route: \"Home Delivery - Downtown (South of Marsh)\"\n// secondaryPhone: \"\"\n// state: \"CA\"\n// zipCode: \"93401\"\n\nfunction prettifyRoadWarrior(d) {\n  try {\n    const {\n      address,\n      city,\n      comments,\n      // deliveryDate,\n      firstName,\n      lastName,\n      // location,\n      // modified,\n      primaryPhone,\n      // route,\n      secondaryPhone,\n      state,\n      zipCode,\n    } = d;\n\n    if (address === \"1640 El Cerrito Ct\") {\n      debugger;\n    }\n\n    var { number, street, type, prefix } = parseAddress.parseLocation(address);\n    console.log(`street:`, street);\n    if (street === \"El\") debugger;\n    return {\n      Name: firstName + \" \" + lastName,\n      \"Building/House Number\": number,\n      \"Street Name\": `${prefix || \"\"} ${street} ${type || \"\"}`.trim(),\n      City: city || \"San Luis Obispo\",\n      \"State/Region\": state || \"CA\",\n      Postal: zipCode || \"93401\",\n      Country: \"US\",\n      Color: \"blue\",\n      Phone: primaryPhone || secondaryPhone,\n      Note: comments,\n      Latitude: \"\",\n      Longitude: \"\",\n      \"Visit Time\": \"\",\n    };\n  } catch (e) {\n    console.log(`couldn't prettify :`, d);\n    return [];\n  }\n}\n","import React from \"react\";\nimport Papa from \"papaparse\";\nimport \"./App.css\";\nimport { createSpreadsheets } from \"./utils/createSpreadsheets\";\nimport { camelCase } from \"lodash\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={createSpreadsheets}>click me</button>\n        Drag your distribution csv here:\n        <input\n          className={\"fileInput\"}\n          onChange={function (event) {\n            var fileList = document.querySelector(\".fileInput\").files;\n            console.log(`fileList:`, fileList);\n            Papa.parse(fileList[0], {\n              header: true,\n              transformHeader: camelCase,\n              complete: function(results) {\n                console.log(\"Finished:\", results.data);\n                createSpreadsheets(results.data)\n              }\n            })\n          }}\n          type=\"file\"\n        ></input>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}