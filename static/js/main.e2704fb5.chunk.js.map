{"version":3,"sources":["utils/createSpreadsheets.js","App.js","serviceWorker.js","index.js"],"names":["createSpreadsheets","dataArray","spreadsheetsByRoute","console","log","forEach","d","route","push","data","key","name","prettyData","flatMap","prettifyRoadWarrior","wb","window","XLSX","utils","book_new","ws","json_to_sheet","book_append_sheet","writeFile","createRoadWarriorExcel","address","city","comments","firstName","deliveryDate","lastName","primaryPhone","location","modified","secondaryPhone","state","zipCode","parseAddress","parseLocation","Name","number","street","City","Postal","Country","Color","Phone","Note","Latitude","Longitude","e","App","className","onChange","event","fileList","document","querySelector","files","Papa","parse","header","transformHeader","camelCase","complete","results","type","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAGO,SAASA,EAAmBC,GACjC,IAAMC,EAAsB,GAC5BC,QAAQC,IAAR,aAA0BH,GAC1BA,EAAUI,SAAQ,SAACC,GAAO,IAChBC,EAAUD,EAAVC,MACR,IAAKA,EAAO,OAAOJ,QAAQC,IAAI,4BAA6BE,GACvDJ,EAAoBK,KAAQL,EAAoBK,GAAS,IAC9DL,EAAoBK,GAAOC,KAAKF,MAGlCD,kBAAQH,GAAqB,SAACO,EAAMC,GAClC,IAAKA,EAAK,OAAOP,QAAQC,IAAI,0BAA2BK,IAM5D,SAAgCA,EAAME,GACpCR,QAAQC,IAAR,QAAqBO,GACrB,IAAMC,EAAaC,kBAAQJ,EAAMK,GAC7BC,EAAKC,OAAOC,KAAKC,MAAMC,WACrBC,EAAKJ,OAAOC,KAAKC,MAAMG,cAAcT,GAI3CI,OAAOC,KAAKC,MAAMI,kBAAkBP,EAAIK,EAH1B,WAIdJ,OAAOC,KAAKM,UAAUR,EAAtB,UAA6BJ,EAA7B,cAbEa,CAAuBf,EAAMC,MA+BjC,SAASI,EAAoBR,GAC3B,IAAK,IAEDmB,EAaEnB,EAbFmB,QACAC,EAYEpB,EAZFoB,KACAC,EAWErB,EAXFqB,SAEAC,GASEtB,EAVFuB,aAUEvB,EATFsB,WACAE,EAQExB,EARFwB,SAGAC,GAKEzB,EAPF0B,SAOE1B,EANF2B,SAME3B,EALFyB,cAEAG,GAGE5B,EAJFC,MAIED,EAHF4B,gBACAC,EAEE7B,EAFF6B,MACAC,EACE9B,EADF8B,QAdA,EAiBuBC,IAAaC,cAAcb,GAEpD,MAAO,CACLc,KAAMX,EAAY,IAAME,EACxB,wBArBA,EAiBIU,OAKJ,cAtBA,EAiBYC,OAMZC,KAAMhB,GAAQ,kBACd,eAAgBS,GAAS,KACzBQ,OAAQP,GAAW,QACnBQ,QAAS,gBACTC,MAAO,OACPC,MAAOf,GAAgBG,EACvBa,KAAMpB,EACNqB,SAAU,GACVC,UAAW,GACX,aAAc,IAEhB,MAAOC,GAEP,OADA/C,QAAQC,IAAR,sBAAmCE,GAC5B,ICnDI6C,MA1Bf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,mCAEE,2BACEA,UAAW,YACXC,SAAU,SAAUC,GAClB,IAAIC,EAAWC,SAASC,cAAc,cAAcC,MACpDvD,QAAQC,IAAR,YAAyBmD,GACzBI,IAAKC,MAAML,EAAS,GAAI,CACtBM,QAAQ,EACRC,gBAAiBC,YACjBC,SAAU,SAASC,GACjB9D,QAAQC,IAAI,YAAa6D,EAAQxD,MACjCT,EAAmBiE,EAAQxD,UAIjCyD,KAAK,YCdKC,QACW,cAA7BnD,OAAOgB,SAASoC,UAEe,UAA7BpD,OAAOgB,SAASoC,UAEhBpD,OAAOgB,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9E,QAAQ8E,MAAMA,EAAMC,a","file":"static/js/main.e2704fb5.chunk.js","sourcesContent":["import { forEach, flatMap } from \"lodash\";\nimport parseAddress from \"parse-address\";\n\nexport function createSpreadsheets(dataArray) {\n  const spreadsheetsByRoute = {};\n  console.log(`dataArray:`, dataArray);\n  dataArray.forEach((d) => {\n    const { route } = d;\n    if (!route) return console.log(\"No route found for data: \", d);\n    if (!spreadsheetsByRoute[route]) spreadsheetsByRoute[route] = [];\n    spreadsheetsByRoute[route].push(d);\n  });\n\n  forEach(spreadsheetsByRoute, (data, key) => {\n    if (!key) return console.log(\"No key found for data: \", data);\n\n    createRoadWarriorExcel(data, key);\n  });\n}\n\nfunction createRoadWarriorExcel(data, name) {\n  console.log(`name:`, name);\n  const prettyData = flatMap(data, prettifyRoadWarrior);\n  var wb = window.XLSX.utils.book_new();\n  const ws = window.XLSX.utils.json_to_sheet(prettyData);\n  var ws_name = \"Uploads\";\n\n  /* Add the worksheet to the workbook */\n  window.XLSX.utils.book_append_sheet(wb, ws, ws_name);\n  window.XLSX.writeFile(wb, `${name}_out.xlsx`);\n}\n\n// \"\": \"\"\n// address: \"1512 Morro Street\"\n// city: \"San Luis Obispo\"\n// comments: \"\"\n// deliveryDate: \"Thursday, May 28, 2020\"\n// firstName: \"Torrey\"\n// lastName: \"Sanseverino\"\n// location: \"Home Delivery - Torrey Sanseverino\"\n// modified: \"No\"\n// primaryPhone: \"(858) 722 3003\"\n// route: \"Home Delivery - Downtown (South of Marsh)\"\n// secondaryPhone: \"\"\n// state: \"CA\"\n// zipCode: \"93401\"\n\nfunction prettifyRoadWarrior(d) {\n  try {\n    const {\n      address,\n      city,\n      comments,\n      deliveryDate,\n      firstName,\n      lastName,\n      location,\n      modified,\n      primaryPhone,\n      route,\n      secondaryPhone,\n      state,\n      zipCode,\n    } = d;\n\n    var { number, street } = parseAddress.parseLocation(address);\n\n    return {\n      Name: firstName + \" \" + lastName,\n      \"Building/House Number\": number,\n      \"Street Name\": street,\n      City: city || \"San Luis Obispo\",\n      \"State/Region\": state || \"CA\",\n      Postal: zipCode || \"93401\",\n      Country: \"United States\",\n      Color: \"blue\",\n      Phone: primaryPhone || secondaryPhone,\n      Note: comments,\n      Latitude: \"\",\n      Longitude: \"\",\n      \"Visit Time\": \"\",\n    };\n  } catch (e) {\n    console.log(`couldn't prettify :`, d);\n    return [];\n  }\n}\n","import React from \"react\";\nimport Papa from \"papaparse\";\nimport \"./App.css\";\nimport { createSpreadsheets } from \"./utils/createSpreadsheets\";\nimport { camelCase } from \"lodash\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Drag your distribution csv here:\n        <input\n          className={\"fileInput\"}\n          onChange={function (event) {\n            var fileList = document.querySelector(\".fileInput\").files;\n            console.log(`fileList:`, fileList);\n            Papa.parse(fileList[0], {\n              header: true,\n              transformHeader: camelCase,\n              complete: function(results) {\n                console.log(\"Finished:\", results.data);\n                createSpreadsheets(results.data)\n              }\n            })\n          }}\n          type=\"file\"\n        ></input>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}