{"version":3,"sources":["utils/startRoadWarriorApiCall.js","App.js","serviceWorker.js","index.js","breadbike_logo_final.png"],"names":["startRoadWarriorApiCall","dataArray","setResponse","a","spreadsheetsByRoute","forEach","d","route","push","responses","Object","keys","key","data","toLowerCase","console","log","includes","uploadDataToApi","name","replace","getMonthDayDate","res","error","prettifyRoadWarriorData","roadWarriorData","itemsByType","itemCountsDescription","quantity","type","process","myHeaders","Headers","append","raw","JSON","stringify","requestOptions","method","headers","body","redirect","fetch","then","response","result","text","status","statusText","success","catch","itemMap","flatMap","address","city","firstName","lastName","primaryPhone","secondaryPhone","state","zipCode","orderDescription","startsWith","item","index","Number","trim","itemType","Name","Address","Phone","Note","e","date","Date","toLocaleString","month","getDate","App","useState","working","setworking","className","width","height","alt","src","logo","onChange","event","fileList","document","querySelector","files","i","Papa","parse","header","transformHeader","camelCase","complete","results","class","length","map","style","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.a51b21e4.chunk.js","sourcesContent":["import { flatMap, forEach } from \"lodash\";\n// import parseAddress from \"parse-address\";\nconst debug = false;\nexport async function startRoadWarriorApiCall(dataArray, setResponse) {\n  try {\n    const spreadsheetsByRoute = {};\n    debug && console.log(`dataArray:`, dataArray);\n    dataArray.forEach((d) => {\n      const { route } = d;\n      if (!route) return debug && console.log(\"No route found for data: \", d);\n      if (!spreadsheetsByRoute[route]) spreadsheetsByRoute[route] = [];\n      spreadsheetsByRoute[route].push(d);\n    });\n    const responses = [];\n    for (const key of Object.keys(spreadsheetsByRoute)) {\n      const data = spreadsheetsByRoute[key];\n\n      if (!key || !key.toLowerCase)\n        return console.log(\"No key found for data: \", data);\n      if (key.includes(\"Home Delivery -\")) {\n        //if it doesn't have the words \"home delivery\" in the route name, we won't include it\n\n        const res = await uploadDataToApi({\n          data,\n          name: key.replace(\n            \"Home Delivery -\",\n            (data[0][\"deliveryDate\"] &&\n              getMonthDayDate(data[0][\"deliveryDate\"])) ||\n              \"\"\n          ),\n        });\n\n        responses.push(res);\n      }\n    }\n    return responses;\n  } catch (error) {\n    console.log(`Upload failed error:`, error);\n    return {\n      error:\n        \"The upload failed for some reason. Check the console for more info!\",\n    };\n  }\n}\n\nasync function uploadDataToApi({ data, name, setResponse }) {\n  //we first need to prettify this data to get it ready for the roadwarrior api\n  const { roadWarriorData, itemsByType } = prettifyRoadWarriorData(data);\n  let itemCountsDescription = \"\";\n  forEach(itemsByType, (quantity, type) => {\n    itemCountsDescription += `${quantity} ${type}, `;\n  });\n  const isLocal = process.env.NODE_ENV !== \"production\";\n\n  const azureUrl = isLocal\n    ? \"http://localhost:7071/api/HttpTrigger1\"\n    : \"https://tnrich-breadbike.azurewebsites.net\";\n\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  var raw = JSON.stringify({\n    name,\n    roadWarriorData,\n    itemCountsDescription,\n  });\n\n  var requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: raw,\n    redirect: \"follow\",\n  };\n  //hit the azure serverless function where we'll do additional google maps api calls for each roadwarrior\n  return await fetch(azureUrl, requestOptions)\n    .then((response) => {\n      console.log(`response:`, response);\n      const result = response.text();\n      if (response.status !== 200) {\n        console.log(`error uploading. got a result.error!:`, result.statusText);\n        return {\n          success: false,\n          name,\n          error: result.statusText,\n        };\n      } else {\n        return { success: true, name, result };\n      }\n    })\n\n    .catch((error) => {\n      console.log(`error uploading!:`, error);\n      return {\n        success: false,\n        name,\n        error,\n      };\n    });\n}\n\nconst itemMap = {\n  \"Baker's Choice Rustic Loaf\": \"Rustic\",\n  \"Baker's Choice Pan Loaf\": \"Pan\",\n  \"The Rye Loaf\": \"Rye\",\n};\n\nfunction prettifyRoadWarriorData(data) {\n  const itemsByType = {};\n  const roadWarriorData = flatMap(data, (d) => {\n    try {\n      const {\n        address,\n        city,\n        firstName,\n        lastName,\n        primaryPhone,\n        secondaryPhone,\n        state,\n        zipCode,\n      } = d;\n      debug && console.log(`address:`, address);\n      let orderDescription = \"\";\n\n      let quantity;\n\n      Object.keys(d).forEach((key) => {\n        if (key.startsWith(\"noHeader__\")) {\n          const item = d[key];\n\n          if (item) {\n            const index = Number(key.replace(\"noHeader__\", \"\").trim());\n            if (index % 3 === 0) {\n              quantity = item || \"\";\n            }\n            //skip index % 3  === 1 because that is the \"unit\" we don't need\n            if (index % 3 === 2) {\n              if (item.includes(\"Biker's Tip\")) {\n                return;\n              }\n\n              const itemType = (\n                itemMap[item] ||\n                item\n                  .replace(\"Stepladder Creamery\", \"\")\n                  .replace(\"Leigh's Bakeshop\", \"\")\n              ).trim();\n              itemsByType[itemType] =\n                Number(itemsByType[itemType] || 0) + Number(quantity);\n              orderDescription += quantity + \" \" + itemType + \" \";\n            }\n          }\n        }\n      });\n      debug && console.log(`orderDescription:`, orderDescription);\n\n      return {\n        Name: firstName + \" \" + lastName,\n        Address: `${address} ${city} ${state} ${zipCode}`,\n        Phone: primaryPhone || secondaryPhone,\n        Note: orderDescription,\n      };\n    } catch (e) {\n      console.log(`couldn't prettify :`, d);\n      return [];\n    }\n  });\n  return {\n    itemsByType,\n    roadWarriorData,\n  };\n}\n\n// \"\": \"\"\n// address: \"1512 Morro Street\"\n// city: \"San Luis Obispo\"\n// comments: \"\"\n// deliveryDate: \"Thursday, May 28, 2020\"\n// firstName: \"Torrey\"\n// lastName: \"Sanseverino\"\n// location: \"Home Delivery - Torrey Sanseverino\"\n// modified: \"No\"\n// primaryPhone: \"(858) 722 3003\"\n// route: \"Home Delivery - Downtown (South of Marsh)\"\n// secondaryPhone: \"\"\n// state: \"CA\"\n// zipCode: \"93401\"\n\n// Change \"Baker's Choice Rustic Loaf\" to \"Rustic\",\n// Change \"Baker's Choice Pan Loaf\" to \"Pan\",\n// change \"The Rye Loaf\" to \"Rye\",\n// Remove \"Stepladder Creamery\" from both cheese names,\n// Remove \"Leigh's Bakeshop\" from both cookie names.\n// Do not include any \"Biker's Tip\" orders.\n// Do not include the \"units\".\n// So an order (as read in a distribution row) for\n// \" 1 | loaf | Baker's Choice Rustic Loaf | 2 | 2.0 Cookie(s) | Leigh's Bakeshop Dark Chocolate Chunk Cookie | 1 | Jar | Stepladder Creamery Marinated Fromage Blanc | 1 | share | Biker's Tip\"\n// would read in the note as\n// \"1 Rustic, 2 Dark Chocolate Chunk Cookie, 1 Marinated Fromage Blanc\"\n\nfunction getMonthDayDate(d) {\n  const date = new Date(d);\n  return (\n    date.toLocaleString(\"default\", { month: \"long\" }) +\n    \" \" +\n    (date.getDate() > 9 ? date.getDate() : \"0\" + date.getDate())\n  );\n}\n","import React, { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport \"./App.css\";\nimport { startRoadWarriorApiCall } from \"./utils/startRoadWarriorApiCall\";\nimport { camelCase } from \"lodash\";\nimport logo from \"./breadbike_logo_final.png\";\nconst debug = false;\nfunction App() {\n  const [working, setworking] = useState(false);\n  const [responses, setResponse] = useState([]);\n  // const [responseFailure, setResponseFailure] = useState()\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img width={200} height={200} alt=\"breadbike logo\" src={logo}></img>\n        <h3>Weclome to the breadbike route planner</h3>\n        <h5>Drag today's distribution.csv report from farmigo here: </h5>\n\n        <br></br>\n        <input\n          className={\"fileInput\"}\n          onChange={function (event) {\n            var fileList = document.querySelector(\".fileInput\").files;\n            debug && console.log(`fileList:`, fileList);\n            let i = 0;\n            Papa.parse(fileList[0], {\n              header: true,\n              transformHeader: (header) => {\n                debug && console.log(`header:`, header);\n                return header ? camelCase(header) : `noHeader__${i++}`;\n              },\n              complete: async function (results) {\n                debug && console.log(\"Finished:\", results.data);\n                setworking(true);\n                const responses = await startRoadWarriorApiCall(results.data);\n                setResponse(responses);\n                setworking(false);\n              },\n            });\n          }}\n          type=\"file\"\n        ></input>\n\n        <br></br>\n        {working && <div class=\"loader\"></div>}\n        {!!responses.length && <h3>Results:</h3>}\n        {responses.map(({ name, success, error, results }, i) => {\n          return (\n            <div key={i}>\n              {name} &nbsp;&nbsp;{\" \"}\n              <span style={{ color: success ? \"inherit\" : \"red\" }}>\n                Upload Success: {!!success + \"\"}\n              </span>{\" \"}\n              <br></br>\n              {error\n                ? typeof error === \"string\"\n                  ? error\n                  : JSON.stringify(error, null, 2)\n                : success\n                ? \"\"\n                : \"Undetermined error, check the logs\"}{\" \"}\n              {results && JSON.stringify(results, null, 2)}\n              <br></br>\n              <br></br>\n            </div>\n          );\n        })}\n\n        <div>Refresh the page to upload new csvs </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/breadbike_logo_final.a56f368b.png\";"],"sourceRoot":""}